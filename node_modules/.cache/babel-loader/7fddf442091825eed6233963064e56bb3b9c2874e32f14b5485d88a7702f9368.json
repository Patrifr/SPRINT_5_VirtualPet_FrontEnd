{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\patri\\\\Desktop\\\\JAVA_ITACADEMY\\\\SPRINT_5_VirtualPet\\\\Front\\\\src\\\\components\\\\Pet\\\\PetDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom'; // Asegúrate de tener useParams para leer los parámetros de la URL\nimport { getPetDetails } from '../../services/api'; // Asegúrate de que la función getPetDetails esté correctamente importada\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PetDashboard = () => {\n  _s();\n  const {\n    petId\n  } = useParams(); // Obtén el petId desde la URL usando useParams\n  const userId = localStorage.getItem('userId'); // Obtén el userId desde el localStorage (ya lo tienes guardado)\n  const [pet, setPet] = useState(null);\n  const navigate = useNavigate(); // Para redirigir al usuario si es necesario\n\n  useEffect(() => {\n    const fetchPetDetails = async () => {\n      try {\n        const token = localStorage.getItem('token'); // Obtener el token para autenticar la petición\n        const response = await getPetDetails(userId, petId, token); // Llamada a la API con userId y petId\n        console.log(response.data);\n        setPet(response.data); // Guardamos los datos de la mascota en el estado\n      } catch (err) {\n        console.error('Error fetching pet details:', err);\n      }\n    };\n    if (petId) {\n      // Solo hacemos la solicitud si petId está disponible\n      fetchPetDetails();\n    }\n  }, [petId, userId]); // El useEffect se ejecutará cada vez que petId o userId cambien\n\n  if (!pet) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pet-detail-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: pet.petName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: require(`../../assets/pets/${pet.petType}_${pet.petColor}.png`),\n      alt: pet.petName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Type: \", pet.petType]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Color: \", pet.petColor]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Happiness: \", pet.happiness]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Hunger: \", pet.hunger]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(PetDashboard, \"KPV/G8xAss+7MYffWn4icn52u3M=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = PetDashboard;\nexport default PetDashboard;\nvar _c;\n$RefreshReg$(_c, \"PetDashboard\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","getPetDetails","jsxDEV","_jsxDEV","PetDashboard","_s","petId","userId","localStorage","getItem","pet","setPet","navigate","fetchPetDetails","token","response","console","log","data","err","error","children","fileName","_jsxFileName","lineNumber","columnNumber","className","petName","src","require","petType","petColor","alt","happiness","hunger","_c","$RefreshReg$"],"sources":["C:/Users/patri/Desktop/JAVA_ITACADEMY/SPRINT_5_VirtualPet/Front/src/components/Pet/PetDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom'; // Asegúrate de tener useParams para leer los parámetros de la URL\r\nimport { getPetDetails } from '../../services/api'; // Asegúrate de que la función getPetDetails esté correctamente importada\r\n\r\nconst PetDashboard = () => {\r\n  const { petId } = useParams(); // Obtén el petId desde la URL usando useParams\r\n  const userId = localStorage.getItem('userId'); // Obtén el userId desde el localStorage (ya lo tienes guardado)\r\n  const [pet, setPet] = useState(null);\r\n  const navigate = useNavigate(); // Para redirigir al usuario si es necesario\r\n\r\n  useEffect(() => {\r\n    const fetchPetDetails = async () => {\r\n        try {\r\n          const token = localStorage.getItem('token'); // Obtener el token para autenticar la petición\r\n          const response = await getPetDetails(userId, petId, token); // Llamada a la API con userId y petId\r\n          console.log(response.data);\r\n          setPet(response.data); // Guardamos los datos de la mascota en el estado\r\n        } catch (err) {\r\n          console.error('Error fetching pet details:', err);\r\n        }\r\n    };\r\n\r\n    if (petId) {  // Solo hacemos la solicitud si petId está disponible\r\n      fetchPetDetails();\r\n    }\r\n  }, [petId, userId]); // El useEffect se ejecutará cada vez que petId o userId cambien\r\n\r\n  if (!pet) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"pet-detail-container\">\r\n      <h1>{pet.petName}</h1>\r\n      <img \r\n        src={require(`../../assets/pets/${pet.petType}_${pet.petColor}.png`)} \r\n        alt={pet.petName} \r\n      />\r\n      <p>Type: {pet.petType}</p>\r\n      <p>Color: {pet.petColor}</p>\r\n      <p>Happiness: {pet.happiness}</p>\r\n      <p>Hunger: {pet.hunger}</p>\r\n      {/* Cualquier otra información que desees mostrar */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PetDashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}