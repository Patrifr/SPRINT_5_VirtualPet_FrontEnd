{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\patri\\\\Desktop\\\\JAVA_ITACADEMY\\\\SPRINT_5_VirtualPet\\\\Front\\\\src\\\\components\\\\Pet\\\\UserDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { getUserPets } from '../../services/api'; // Importamos el servicio para obtener mascotas\nimport '../../styles/UserDashboard.css'; // Asegúrate de tener el archivo CSS adecuado\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserDashboard = () => {\n  _s();\n  const [pets, setPets] = useState([]);\n  const navigate = useNavigate();\n  const userId = localStorage.getItem('userId');\n  console.log('Pets:', response.data);\n  useEffect(() => {\n    const fetchUserPets = async () => {\n      try {\n        const response = await getUserPets(userId); // Llamamos a la API\n        console.log(response.data); // Verifica que recibes las mascotas correctamente\n        setPets(response.data); // Guardamos las mascotas en el estado\n      } catch (error) {\n        console.error('Error fetching pets:', error);\n      }\n    };\n    if (userId) {\n      fetchUserPets(); // Solo buscamos mascotas si el userId existe\n    }\n  }, [userId]);\n  const handleCreatePet = () => {\n    // Redirige a la página para crear una nueva mascota\n    navigate('/create-pet');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"user-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Your WhimsyPets\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCreatePet,\n      children: \"Create a New WhimsyPet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pet-cards\",\n      children: pets.length > 0 ? pets.map(pet => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pet-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: pet.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: pet.type\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: pet.color\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 15\n        }, this)]\n      }, pet.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"You don't have any pets yet!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(UserDashboard, \"jOkCMYkOz2Q5P0Ot2LuKsql4T2M=\", false, function () {\n  return [useNavigate];\n});\n_c = UserDashboard;\nexport default UserDashboard;\nvar _c;\n$RefreshReg$(_c, \"UserDashboard\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","getUserPets","jsxDEV","_jsxDEV","UserDashboard","_s","pets","setPets","navigate","userId","localStorage","getItem","console","log","response","data","fetchUserPets","error","handleCreatePet","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","map","pet","name","type","color","id","_c","$RefreshReg$"],"sources":["C:/Users/patri/Desktop/JAVA_ITACADEMY/SPRINT_5_VirtualPet/Front/src/components/Pet/UserDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { getUserPets } from '../../services/api';  // Importamos el servicio para obtener mascotas\r\nimport '../../styles/UserDashboard.css';  // Asegúrate de tener el archivo CSS adecuado\r\n\r\nconst UserDashboard = () => {\r\n  const [pets, setPets] = useState([]);\r\n  const navigate = useNavigate();\r\n  const userId = localStorage.getItem('userId');   \r\n\r\n  console.log('Pets:', response.data);\r\n\r\n  useEffect(() => {\r\n    const fetchUserPets = async () => {\r\n      try {\r\n        const response = await getUserPets(userId);  // Llamamos a la API\r\n        console.log(response.data);  // Verifica que recibes las mascotas correctamente\r\n        setPets(response.data);  // Guardamos las mascotas en el estado\r\n      } catch (error) {\r\n        console.error('Error fetching pets:', error);\r\n      }\r\n    };\r\n\r\n    if (userId) {\r\n      fetchUserPets();  // Solo buscamos mascotas si el userId existe\r\n    }\r\n  }, [userId]);\r\n\r\n  const handleCreatePet = () => {\r\n    // Redirige a la página para crear una nueva mascota\r\n    navigate('/create-pet');\r\n  };\r\n\r\n  return (\r\n    <div className=\"user-dashboard\">\r\n      <h1>Your WhimsyPets</h1>\r\n      <button onClick={handleCreatePet}>Create a New WhimsyPet</button>\r\n      <div className=\"pet-cards\">\r\n        {pets.length > 0 ? (\r\n          pets.map((pet) => (\r\n            <div key={pet.id} className=\"pet-card\">\r\n              <h3>{pet.name}</h3>\r\n              <p>{pet.type}</p>\r\n              <p>{pet.color}</p>\r\n              {/* Puedes añadir más detalles según lo que devuelva tu API */}\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <p>You don't have any pets yet!</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserDashboard;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,WAAW,QAAQ,oBAAoB,CAAC,CAAE;AACnD,OAAO,gCAAgC,CAAC,CAAE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAMU,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAC9B,MAAMS,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;EAE7CC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEC,QAAQ,CAACC,IAAI,CAAC;EAEnChB,SAAS,CAAC,MAAM;IACd,MAAMiB,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMF,QAAQ,GAAG,MAAMb,WAAW,CAACQ,MAAM,CAAC,CAAC,CAAE;QAC7CG,OAAO,CAACC,GAAG,CAACC,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAE;QAC7BR,OAAO,CAACO,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAE;MAC3B,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdL,OAAO,CAACK,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAED,IAAIR,MAAM,EAAE;MACVO,aAAa,CAAC,CAAC,CAAC,CAAE;IACpB;EACF,CAAC,EAAE,CAACP,MAAM,CAAC,CAAC;EAEZ,MAAMS,eAAe,GAAGA,CAAA,KAAM;IAC5B;IACAV,QAAQ,CAAC,aAAa,CAAC;EACzB,CAAC;EAED,oBACEL,OAAA;IAAKgB,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7BjB,OAAA;MAAAiB,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxBrB,OAAA;MAAQsB,OAAO,EAAEP,eAAgB;MAAAE,QAAA,EAAC;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACjErB,OAAA;MAAKgB,SAAS,EAAC,WAAW;MAAAC,QAAA,EACvBd,IAAI,CAACoB,MAAM,GAAG,CAAC,GACdpB,IAAI,CAACqB,GAAG,CAAEC,GAAG,iBACXzB,OAAA;QAAkBgB,SAAS,EAAC,UAAU;QAAAC,QAAA,gBACpCjB,OAAA;UAAAiB,QAAA,EAAKQ,GAAG,CAACC;QAAI;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACnBrB,OAAA;UAAAiB,QAAA,EAAIQ,GAAG,CAACE;QAAI;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACjBrB,OAAA;UAAAiB,QAAA,EAAIQ,GAAG,CAACG;QAAK;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAHVI,GAAG,CAACI,EAAE;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKX,CACN,CAAC,gBAEFrB,OAAA;QAAAiB,QAAA,EAAG;MAA4B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IACnC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACnB,EAAA,CAhDID,aAAa;EAAA,QAEAJ,WAAW;AAAA;AAAAiC,EAAA,GAFxB7B,aAAa;AAkDnB,eAAeA,aAAa;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}