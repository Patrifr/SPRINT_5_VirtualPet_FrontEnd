{"ast":null,"code":"const handleInteraction = async interactionType => {\n  console.log(\"Pet before interaction:\", pet); // Verifica si pet est치 correctamente cargado\n  if (!pet || !pet.id) {\n    console.error(\"Pet or Pet ID is not loaded yet.\");\n    return;\n  }\n  const token = localStorage.getItem('token');\n  if (!token) {\n    console.error(\"Token not found!\");\n    return;\n  }\n\n  // Definir el action y endpoint para las interacciones\n  const interactionMap = {\n    PET: {\n      action: 'PET',\n      endpoint: '/api/pet/update'\n    },\n    FEED: {\n      action: 'FEED',\n      endpoint: '/api/pet/update'\n    }\n  };\n  const {\n    action,\n    endpoint\n  } = interactionMap[interactionType];\n  if (!action || !endpoint) {\n    console.error(\"Unknown interaction type:\", interactionType);\n    return;\n  }\n\n  // Datos a enviar en la solicitud\n  const data = {\n    userId: pet.userId,\n    // Usamos pet.userId correctamente\n    petInteraction: action // Pasamos la interacci칩n (PET o FEED)\n  };\n  try {\n    // Realizamos la solicitud a la API\n    const response = await axios.put(endpoint + `/${pet.id}`, data, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n\n    // Comprobamos si la respuesta fue exitosa\n    if (response && response.data) {\n      console.log(`Pet ${interactionType} interaction successful!`);\n      setPet(response.data); // Actualizamos el estado de la mascota con la respuesta de la API\n    }\n  } catch (err) {\n    console.error(\"Error updating pet:\", err);\n  }\n};","map":{"version":3,"names":["handleInteraction","interactionType","console","log","pet","id","error","token","localStorage","getItem","interactionMap","PET","action","endpoint","FEED","data","userId","petInteraction","response","axios","put","headers","Authorization","setPet","err"],"sources":["C:/Users/patri/Desktop/JAVA_ITACADEMY/SPRINT_5_VirtualPet/Front/src/components/Pet/PetDashboard.js"],"sourcesContent":["const handleInteraction = async (interactionType) => {\r\n  console.log(\"Pet before interaction:\", pet);  // Verifica si pet est치 correctamente cargado\r\n  if (!pet || !pet.id) {\r\n    console.error(\"Pet or Pet ID is not loaded yet.\");\r\n    return;\r\n  }\r\n\r\n  const token = localStorage.getItem('token');\r\n  if (!token) {\r\n    console.error(\"Token not found!\");\r\n    return;\r\n  }\r\n\r\n  // Definir el action y endpoint para las interacciones\r\n  const interactionMap = {\r\n    PET: { action: 'PET', endpoint: '/api/pet/update' },\r\n    FEED: { action: 'FEED', endpoint: '/api/pet/update' },\r\n  };\r\n\r\n  const { action, endpoint } = interactionMap[interactionType];\r\n  if (!action || !endpoint) {\r\n    console.error(\"Unknown interaction type:\", interactionType);\r\n    return;\r\n  }\r\n\r\n  // Datos a enviar en la solicitud\r\n  const data = {\r\n    userId: pet.userId,  // Usamos pet.userId correctamente\r\n    petInteraction: action,  // Pasamos la interacci칩n (PET o FEED)\r\n  };\r\n\r\n  try {\r\n    // Realizamos la solicitud a la API\r\n    const response = await axios.put(endpoint + `/${pet.id}`, data, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      }\r\n    });\r\n\r\n    // Comprobamos si la respuesta fue exitosa\r\n    if (response && response.data) {\r\n      console.log(`Pet ${interactionType} interaction successful!`);\r\n      setPet(response.data); // Actualizamos el estado de la mascota con la respuesta de la API\r\n    }\r\n  } catch (err) {\r\n    console.error(\"Error updating pet:\", err);\r\n  }\r\n};"],"mappings":"AAAA,MAAMA,iBAAiB,GAAG,MAAOC,eAAe,IAAK;EACnDC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEC,GAAG,CAAC,CAAC,CAAE;EAC9C,IAAI,CAACA,GAAG,IAAI,CAACA,GAAG,CAACC,EAAE,EAAE;IACnBH,OAAO,CAACI,KAAK,CAAC,kCAAkC,CAAC;IACjD;EACF;EAEA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAI,CAACF,KAAK,EAAE;IACVL,OAAO,CAACI,KAAK,CAAC,kBAAkB,CAAC;IACjC;EACF;;EAEA;EACA,MAAMI,cAAc,GAAG;IACrBC,GAAG,EAAE;MAAEC,MAAM,EAAE,KAAK;MAAEC,QAAQ,EAAE;IAAkB,CAAC;IACnDC,IAAI,EAAE;MAAEF,MAAM,EAAE,MAAM;MAAEC,QAAQ,EAAE;IAAkB;EACtD,CAAC;EAED,MAAM;IAAED,MAAM;IAAEC;EAAS,CAAC,GAAGH,cAAc,CAACT,eAAe,CAAC;EAC5D,IAAI,CAACW,MAAM,IAAI,CAACC,QAAQ,EAAE;IACxBX,OAAO,CAACI,KAAK,CAAC,2BAA2B,EAAEL,eAAe,CAAC;IAC3D;EACF;;EAEA;EACA,MAAMc,IAAI,GAAG;IACXC,MAAM,EAAEZ,GAAG,CAACY,MAAM;IAAG;IACrBC,cAAc,EAAEL,MAAM,CAAG;EAC3B,CAAC;EAED,IAAI;IACF;IACA,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAACC,GAAG,CAACP,QAAQ,GAAG,IAAIT,GAAG,CAACC,EAAE,EAAE,EAAEU,IAAI,EAAE;MAC9DM,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUf,KAAK;MAChC;IACF,CAAC,CAAC;;IAEF;IACA,IAAIW,QAAQ,IAAIA,QAAQ,CAACH,IAAI,EAAE;MAC7Bb,OAAO,CAACC,GAAG,CAAC,OAAOF,eAAe,0BAA0B,CAAC;MAC7DsB,MAAM,CAACL,QAAQ,CAACH,IAAI,CAAC,CAAC,CAAC;IACzB;EACF,CAAC,CAAC,OAAOS,GAAG,EAAE;IACZtB,OAAO,CAACI,KAAK,CAAC,qBAAqB,EAAEkB,GAAG,CAAC;EAC3C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}