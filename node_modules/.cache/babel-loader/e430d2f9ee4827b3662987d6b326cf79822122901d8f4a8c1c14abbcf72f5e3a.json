{"ast":null,"code":"document.addEventListener('DOMContentLoaded', function () {\n  // Obtener el token JWT desde el almacenamiento local\n  const token = localStorage.getItem('jwtToken');\n  const userId = getUserIdFromToken(token); // Función que extrae el userId del token\n\n  // Obtener el petId desde la URL (cuando se hace clic en una mascota desde el user dashboard)\n  const urlParams = new URLSearchParams(window.location.search);\n  const petId = urlParams.get('petId'); // Obtener el petId de la URL\n\n  // Si no hay un petId, redirigir al user dashboard\n  if (!petId) {\n    window.location.href = '/userDashboard'; // Redirige si no hay petId\n    return;\n  }\n\n  // Obtener la mascota por petId\n  async function fetchPet(petId) {\n    try {\n      const response = await fetch(`/api/pet/get?userId=${userId}&petId=${petId}`);\n      const pet = await response.json();\n      displayPet(pet);\n    } catch (error) {\n      console.error(\"Error fetching pet:\", error);\n    }\n  }\n\n  // Mostrar la mascota en el UI\n  function displayPet(pet) {\n    const petContainer = document.getElementById(\"pet-container\");\n    const petName = document.getElementById(\"pet-name\");\n    const petImage = document.getElementById(\"pet-image\");\n    const petHappiness = document.getElementById(\"pet-happiness\");\n    const petHunger = document.getElementById(\"pet-hunger\");\n    const petBackground = document.getElementById(\"pet-background\");\n    petName.textContent = pet.petName;\n    petHappiness.textContent = `Felicidad: ${pet.happiness}`;\n    petHunger.textContent = `Hambre: ${pet.hunger}`;\n    petImage.src = `/images/${pet.petType.toUpperCase()}_${pet.petColor.toUpperCase()}.png`;\n\n    // Cambiar el fondo según la localización\n    petBackground.style.backgroundImage = `url(/images/${pet.location.toUpperCase()}.jpg)`;\n\n    // Llenar selectores de localización y accesorios\n    const locationSelect = document.getElementById(\"location-select\");\n    const accessoriesSelect = document.getElementById(\"accessories-select\");\n    locationSelect.innerHTML = `<option value=\"${pet.location}\">${pet.location}</option>`;\n    accessoriesSelect.innerHTML = `<option value=\"${pet.accessory}\">${pet.accessory}</option>`;\n  }\n\n  // Actualizar la mascota (localización, accesorio)\n  async function updatePet(updatedData) {\n    try {\n      const response = await fetch(`/api/pet/update/${petId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedData)\n      });\n      const updatedPet = await response.json();\n      displayPet(updatedPet);\n    } catch (error) {\n      console.error(\"Error updating pet:\", error);\n    }\n  }\n\n  // Interacciones con la mascota\n  async function interactWithPet(interactionType) {\n    const updatedData = {\n      interaction: interactionType\n    };\n    await updatePet(updatedData);\n  }\n\n  // Manejar eventos de cambio en selectores\n  document.getElementById(\"location-select\").addEventListener(\"change\", function () {\n    const newLocation = this.value;\n    updatePet({\n      location: newLocation\n    });\n  });\n  document.getElementById(\"accessories-select\").addEventListener(\"change\", function () {\n    const newAccessory = this.value;\n    updatePet({\n      accessory: newAccessory\n    });\n  });\n\n  // Manejar los botones de interacción\n  document.getElementById(\"pet-button\").addEventListener(\"click\", function () {\n    interactWithPet(\"pet\");\n  });\n  document.getElementById(\"feed-button\").addEventListener(\"click\", function () {\n    interactWithPet(\"feed\");\n  });\n\n  // Función para obtener el userId desde el JWT\n  function getUserIdFromToken(token) {\n    if (!token) return null;\n    const payload = JSON.parse(atob(token.split('.')[1]));\n    return payload.userId; // Asegúrate de que el JWT contenga un userId\n  }\n\n  // Cargar la mascota al iniciar\n  fetchPet(petId);\n});\n\n/*import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { getPetDetails, updatePet } from '../../services/api'; \r\nimport axios from 'axios';  // Agregar esta línea\r\nimport '../../styles/PetDashboard.css';\r\n\r\nconst PetDashboard = () => {\r\n  const location = useLocation();\r\n  const params = new URLSearchParams(location.search);\r\n  const userId = params.get('userId');\r\n  const petId = params.get('petId');  // Obtener el petId de la URL\r\n\r\n  const [pet, setPet] = useState(null);\r\n  const [selectedLocation, setSelectedLocation] = useState('FOREST');\r\n  const [selectedAccessory, setSelectedAccessory] = useState('NONE');\r\n\r\n  useEffect(() => {\r\n    console.log(\"Pet ID from URL:\", petId); \r\n     // Esto te ayudará a verificar si el petId está en la URL\r\n    if (!petId || !userId) {\r\n      console.error(\"Pet ID or User ID is missing from the URL.\");\r\n      return; // Si no hay petId o userId, no se hace la solicitud\r\n    }\r\n  \r\n    const fetchPetDetails = async () => {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        console.error(\"Token not found!\");\r\n        return;\r\n      }\r\n  \r\n      try {\r\n        const response = await getPetDetails(userId, petId, token); \r\n        if (response && response.data) {\r\n          setPet(response.data);  // Guardamos los datos de la mascota en el estado\r\n          console.log(\"Fetched pet details:\", response.data);  // Verifica qué datos obtienes\r\n        } else {\r\n          console.error(\"No pet data received from the API.\");\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Error fetching pet details:\", err);\r\n      }\r\n    };\r\n  \r\n    fetchPetDetails();\r\n  }, [petId, userId]);\r\n\r\n  // Asegurarse de que pet está cargado antes de intentar cambiar la localización o el accesorio\r\n  const handleLocationChange = (e) => {\r\n    setSelectedLocation(e.target.value);\r\n    if (pet && pet.id) {\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        updatePet(pet.id, { location: e.target.value }, token);  // Usamos pet.id correctamente\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleAccessoryChange = (e) => {\r\n    setSelectedAccessory(e.target.value);\r\n    if (pet && pet.id) {\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        updatePet(pet.id, { accessory: e.target.value }, token);  // Usamos pet.id correctamente\r\n      }\r\n    }\r\n  };\r\n  const handleInteraction = async (interactionType) => {\r\n    console.log(\"Pet before interaction:\", pet);  // Verifica que el pet esté correctamente cargado\r\n  \r\n    // Verifica si pet y pet.id están disponibles antes de continuar\r\n    if (!pet || !pet.id) {\r\n      console.error(\"Pet or Pet ID is not loaded yet.\");\r\n      return;\r\n    }\r\n  \r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      console.error(\"Token not found!\");\r\n      return;\r\n    }\r\n  \r\n    // Definir el action y endpoint para las interacciones\r\n    const interactionMap = {\r\n      PET: { action: 'PET', endpoint: '/api/pet/update' },\r\n      FEED: { action: 'FEED', endpoint: '/api/pet/update' },\r\n    };\r\n  \r\n    const { action, endpoint } = interactionMap[interactionType];\r\n    if (!action || !endpoint) {\r\n      console.error(\"Unknown interaction type:\", interactionType);\r\n      return;\r\n    }\r\n  \r\n    // Datos a enviar en la solicitud\r\n    const data = {\r\n      userId: pet.userId,  // Usamos pet.userId correctamente\r\n      petInteraction: action,  // Pasamos la interacción (PET o FEED)\r\n    };\r\n  \r\n    try {\r\n      // Realizamos la solicitud a la API\r\n      const response = await axios.put(endpoint + `/${pet.id}`, data, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        }\r\n      });\r\n  \r\n      // Comprobamos si la respuesta fue exitosa\r\n      if (response && response.data) {\r\n        console.log(`Pet ${interactionType} interaction successful!`);\r\n        setPet(response.data); // Actualizamos el estado de la mascota con la respuesta de la API\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error updating pet:\", err);\r\n    }\r\n  };\r\n  \r\n  if (!pet) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"pet-dashboard-container\">\r\n      <div className=\"pet-dashboard-content\">\r\n        <div className=\"pet-details-container\">\r\n          <h1>{pet.petName}</h1>\r\n          <div className=\"pet-image-container\">\r\n            <img \r\n              src={require(`../../assets/pets/${pet.petType}_${pet.petColor}.png`)} \r\n              alt={pet.petName} \r\n              className=\"pet-image\"\r\n            />\r\n            <img \r\n              src={require(`../../assets/backgrounds/${selectedLocation}.jpg`)} \r\n              alt={`background of ${pet.petName}`} \r\n              className=\"pet-background-image\"\r\n            />\r\n          </div>\r\n          <p>Type: {pet.petType}</p>\r\n          <p>Color: {pet.petColor}</p>\r\n          <p>Happiness: {pet.happiness}</p>\r\n          <p>Hunger: {pet.hunger}</p>\r\n          <p>Created on: {pet.createdAt}</p>\r\n        </div>\r\n\r\n        <div className=\"pet-interactions\">\r\n          <button onClick={() => handleInteraction('PET')}>Pet</button>\r\n          <button onClick={() => handleInteraction('FEED')}>Feed</button>\r\n          <select value={selectedLocation} onChange={handleLocationChange}>\r\n            <option value=\"FOREST\">Forest</option>\r\n            <option value=\"LAKE\">Lake</option>\r\n            <option value=\"COTTAGE\">Cottage</option>\r\n            <option value=\"HAUNTED_HOUSE\">Haunted House</option>\r\n          </select>\r\n          <select value={selectedAccessory} onChange={handleAccessoryChange}>\r\n            <option value=\"NONE\">None</option>\r\n            <option value=\"LEAF\">Leaf</option>\r\n            <option value=\"CROWN\">Crown</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PetDashboard;*/","map":{"version":3,"names":["document","addEventListener","token","localStorage","getItem","userId","getUserIdFromToken","urlParams","URLSearchParams","window","location","search","petId","get","href","fetchPet","response","fetch","pet","json","displayPet","error","console","petContainer","getElementById","petName","petImage","petHappiness","petHunger","petBackground","textContent","happiness","hunger","src","petType","toUpperCase","petColor","style","backgroundImage","locationSelect","accessoriesSelect","innerHTML","accessory","updatePet","updatedData","method","headers","body","JSON","stringify","updatedPet","interactWithPet","interactionType","interaction","newLocation","value","newAccessory","payload","parse","atob","split"],"sources":["C:/Users/patri/Desktop/JAVA_ITACADEMY/SPRINT_5_VirtualPet/Front/src/components/Pet/PetDashboard.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', function () {\r\n  // Obtener el token JWT desde el almacenamiento local\r\n  const token = localStorage.getItem('jwtToken');\r\n  const userId = getUserIdFromToken(token); // Función que extrae el userId del token\r\n\r\n  // Obtener el petId desde la URL (cuando se hace clic en una mascota desde el user dashboard)\r\n  const urlParams = new URLSearchParams(window.location.search);\r\n  const petId = urlParams.get('petId'); // Obtener el petId de la URL\r\n\r\n  // Si no hay un petId, redirigir al user dashboard\r\n  if (!petId) {\r\n      window.location.href = '/userDashboard'; // Redirige si no hay petId\r\n      return;\r\n  }\r\n\r\n  // Obtener la mascota por petId\r\n  async function fetchPet(petId) {\r\n      try {\r\n          const response = await fetch(`/api/pet/get?userId=${userId}&petId=${petId}`);\r\n          const pet = await response.json();\r\n          displayPet(pet);\r\n      } catch (error) {\r\n          console.error(\"Error fetching pet:\", error);\r\n      }\r\n  }\r\n\r\n  // Mostrar la mascota en el UI\r\n  function displayPet(pet) {\r\n      const petContainer = document.getElementById(\"pet-container\");\r\n      const petName = document.getElementById(\"pet-name\");\r\n      const petImage = document.getElementById(\"pet-image\");\r\n      const petHappiness = document.getElementById(\"pet-happiness\");\r\n      const petHunger = document.getElementById(\"pet-hunger\");\r\n      const petBackground = document.getElementById(\"pet-background\");\r\n\r\n      petName.textContent = pet.petName;\r\n      petHappiness.textContent = `Felicidad: ${pet.happiness}`;\r\n      petHunger.textContent = `Hambre: ${pet.hunger}`;\r\n      petImage.src = `/images/${pet.petType.toUpperCase()}_${pet.petColor.toUpperCase()}.png`;\r\n\r\n      // Cambiar el fondo según la localización\r\n      petBackground.style.backgroundImage = `url(/images/${pet.location.toUpperCase()}.jpg)`;\r\n\r\n      // Llenar selectores de localización y accesorios\r\n      const locationSelect = document.getElementById(\"location-select\");\r\n      const accessoriesSelect = document.getElementById(\"accessories-select\");\r\n\r\n      locationSelect.innerHTML = `<option value=\"${pet.location}\">${pet.location}</option>`;\r\n      accessoriesSelect.innerHTML = `<option value=\"${pet.accessory}\">${pet.accessory}</option>`;\r\n  }\r\n\r\n  // Actualizar la mascota (localización, accesorio)\r\n  async function updatePet(updatedData) {\r\n      try {\r\n          const response = await fetch(`/api/pet/update/${petId}`, {\r\n              method: 'PUT',\r\n              headers: {\r\n                  'Content-Type': 'application/json'\r\n              },\r\n              body: JSON.stringify(updatedData)\r\n          });\r\n          const updatedPet = await response.json();\r\n          displayPet(updatedPet);\r\n      } catch (error) {\r\n          console.error(\"Error updating pet:\", error);\r\n      }\r\n  }\r\n\r\n  // Interacciones con la mascota\r\n  async function interactWithPet(interactionType) {\r\n      const updatedData = {\r\n          interaction: interactionType\r\n      };\r\n      await updatePet(updatedData);\r\n  }\r\n\r\n  // Manejar eventos de cambio en selectores\r\n  document.getElementById(\"location-select\").addEventListener(\"change\", function () {\r\n      const newLocation = this.value;\r\n      updatePet({ location: newLocation });\r\n  });\r\n\r\n  document.getElementById(\"accessories-select\").addEventListener(\"change\", function () {\r\n      const newAccessory = this.value;\r\n      updatePet({ accessory: newAccessory });\r\n  });\r\n\r\n  // Manejar los botones de interacción\r\n  document.getElementById(\"pet-button\").addEventListener(\"click\", function () {\r\n      interactWithPet(\"pet\");\r\n  });\r\n\r\n  document.getElementById(\"feed-button\").addEventListener(\"click\", function () {\r\n      interactWithPet(\"feed\");\r\n  });\r\n\r\n  // Función para obtener el userId desde el JWT\r\n  function getUserIdFromToken(token) {\r\n      if (!token) return null;\r\n      const payload = JSON.parse(atob(token.split('.')[1]));\r\n      return payload.userId; // Asegúrate de que el JWT contenga un userId\r\n  }\r\n\r\n  // Cargar la mascota al iniciar\r\n  fetchPet(petId);\r\n});\r\n\r\n/*import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { getPetDetails, updatePet } from '../../services/api'; \r\nimport axios from 'axios';  // Agregar esta línea\r\nimport '../../styles/PetDashboard.css';\r\n\r\nconst PetDashboard = () => {\r\n  const location = useLocation();\r\n  const params = new URLSearchParams(location.search);\r\n  const userId = params.get('userId');\r\n  const petId = params.get('petId');  // Obtener el petId de la URL\r\n\r\n  const [pet, setPet] = useState(null);\r\n  const [selectedLocation, setSelectedLocation] = useState('FOREST');\r\n  const [selectedAccessory, setSelectedAccessory] = useState('NONE');\r\n\r\n  useEffect(() => {\r\n    console.log(\"Pet ID from URL:\", petId); \r\n     // Esto te ayudará a verificar si el petId está en la URL\r\n    if (!petId || !userId) {\r\n      console.error(\"Pet ID or User ID is missing from the URL.\");\r\n      return; // Si no hay petId o userId, no se hace la solicitud\r\n    }\r\n  \r\n    const fetchPetDetails = async () => {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        console.error(\"Token not found!\");\r\n        return;\r\n      }\r\n  \r\n      try {\r\n        const response = await getPetDetails(userId, petId, token); \r\n        if (response && response.data) {\r\n          setPet(response.data);  // Guardamos los datos de la mascota en el estado\r\n          console.log(\"Fetched pet details:\", response.data);  // Verifica qué datos obtienes\r\n        } else {\r\n          console.error(\"No pet data received from the API.\");\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Error fetching pet details:\", err);\r\n      }\r\n    };\r\n  \r\n    fetchPetDetails();\r\n  }, [petId, userId]);\r\n\r\n  // Asegurarse de que pet está cargado antes de intentar cambiar la localización o el accesorio\r\n  const handleLocationChange = (e) => {\r\n    setSelectedLocation(e.target.value);\r\n    if (pet && pet.id) {\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        updatePet(pet.id, { location: e.target.value }, token);  // Usamos pet.id correctamente\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleAccessoryChange = (e) => {\r\n    setSelectedAccessory(e.target.value);\r\n    if (pet && pet.id) {\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        updatePet(pet.id, { accessory: e.target.value }, token);  // Usamos pet.id correctamente\r\n      }\r\n    }\r\n  };\r\n  const handleInteraction = async (interactionType) => {\r\n    console.log(\"Pet before interaction:\", pet);  // Verifica que el pet esté correctamente cargado\r\n  \r\n    // Verifica si pet y pet.id están disponibles antes de continuar\r\n    if (!pet || !pet.id) {\r\n      console.error(\"Pet or Pet ID is not loaded yet.\");\r\n      return;\r\n    }\r\n  \r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      console.error(\"Token not found!\");\r\n      return;\r\n    }\r\n  \r\n    // Definir el action y endpoint para las interacciones\r\n    const interactionMap = {\r\n      PET: { action: 'PET', endpoint: '/api/pet/update' },\r\n      FEED: { action: 'FEED', endpoint: '/api/pet/update' },\r\n    };\r\n  \r\n    const { action, endpoint } = interactionMap[interactionType];\r\n    if (!action || !endpoint) {\r\n      console.error(\"Unknown interaction type:\", interactionType);\r\n      return;\r\n    }\r\n  \r\n    // Datos a enviar en la solicitud\r\n    const data = {\r\n      userId: pet.userId,  // Usamos pet.userId correctamente\r\n      petInteraction: action,  // Pasamos la interacción (PET o FEED)\r\n    };\r\n  \r\n    try {\r\n      // Realizamos la solicitud a la API\r\n      const response = await axios.put(endpoint + `/${pet.id}`, data, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        }\r\n      });\r\n  \r\n      // Comprobamos si la respuesta fue exitosa\r\n      if (response && response.data) {\r\n        console.log(`Pet ${interactionType} interaction successful!`);\r\n        setPet(response.data); // Actualizamos el estado de la mascota con la respuesta de la API\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error updating pet:\", err);\r\n    }\r\n  };\r\n  \r\n  if (!pet) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"pet-dashboard-container\">\r\n      <div className=\"pet-dashboard-content\">\r\n        <div className=\"pet-details-container\">\r\n          <h1>{pet.petName}</h1>\r\n          <div className=\"pet-image-container\">\r\n            <img \r\n              src={require(`../../assets/pets/${pet.petType}_${pet.petColor}.png`)} \r\n              alt={pet.petName} \r\n              className=\"pet-image\"\r\n            />\r\n            <img \r\n              src={require(`../../assets/backgrounds/${selectedLocation}.jpg`)} \r\n              alt={`background of ${pet.petName}`} \r\n              className=\"pet-background-image\"\r\n            />\r\n          </div>\r\n          <p>Type: {pet.petType}</p>\r\n          <p>Color: {pet.petColor}</p>\r\n          <p>Happiness: {pet.happiness}</p>\r\n          <p>Hunger: {pet.hunger}</p>\r\n          <p>Created on: {pet.createdAt}</p>\r\n        </div>\r\n\r\n        <div className=\"pet-interactions\">\r\n          <button onClick={() => handleInteraction('PET')}>Pet</button>\r\n          <button onClick={() => handleInteraction('FEED')}>Feed</button>\r\n          <select value={selectedLocation} onChange={handleLocationChange}>\r\n            <option value=\"FOREST\">Forest</option>\r\n            <option value=\"LAKE\">Lake</option>\r\n            <option value=\"COTTAGE\">Cottage</option>\r\n            <option value=\"HAUNTED_HOUSE\">Haunted House</option>\r\n          </select>\r\n          <select value={selectedAccessory} onChange={handleAccessoryChange}>\r\n            <option value=\"NONE\">None</option>\r\n            <option value=\"LEAF\">Leaf</option>\r\n            <option value=\"CROWN\">Crown</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PetDashboard;*/"],"mappings":"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":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}