{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\patri\\\\Desktop\\\\JAVA_ITACADEMY\\\\SPRINT_5_VirtualPet\\\\Front\\\\src\\\\components\\\\Pet\\\\PetDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom'; // Para navegar a otra página\nimport { getPetDetails, updatePet } from '../../services/api'; // Usamos las funciones desde api.js\nimport '../../styles/PetDashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PetDashboard = () => {\n  _s();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [pet, setPet] = useState(null);\n  const [selectedLocation, setSelectedLocation] = useState('FOREST');\n  //const [selectedAccessory, setSelectedAccessory] = useState('NONE');\n  //const [loading, setLoading] = useState(true);\n\n  // Fetch the pet details from the API when the component is mounted\n\n  const fetchPetDetails = async () => {\n    const token = localStorage.getItem('token');\n    const userId = localStorage.getItem('userId'); // Obtener el userId desde localStorage\n    if (!token || !userId) {\n      console.error(\"Token or userId not found!\");\n      navigate('/signin');\n      return;\n    }\n    try {\n      const response = await getPetDetails(userId, petIdFromUrl, token); // Solo pasamos el petId y userId\n      if (response && response.data) {\n        setPet(response.data); // Guardamos los detalles de la mascota\n        setLoading(false); // Cambiamos a false cuando los detalles se han cargado\n      }\n    } catch (err) {\n      console.error('Error fetching pet details:', err);\n      setLoading(false);\n    }\n  };\n  const handleLocationChange = e => {\n    setSelectedLocation(e.target.value); // Cambia el valor de la localización\n    if (pet && pet.petId) {\n      const token = localStorage.getItem('token');\n      const userId = localStorage.getItem('userId'); // Obtener el userId desde localStorage\n      if (token && userId) {\n        // Construimos el objeto para el body de la solicitud\n        const petUpdateRequest = {\n          location: e.target.value\n        };\n\n        // Llamamos a la API de actualización para la localización\n        updatePet(pet.petId, userId, petUpdateRequest, token).then(response => {\n          console.log(\"Location updated successfully:\", response.data);\n          setPet(response.data); // Actualizamos el estado con los nuevos datos de la mascota\n        }).catch(err => {\n          console.error(\"Error updating location:\", err);\n        });\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pet-dashboard-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pet-dashboard-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pet-details-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: pet.petName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pet-image-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: require(`../../assets/pets/${pet.petType}_${pet.petColor}.png`),\n            alt: pet.petName,\n            className: \"pet-image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: require(`../../assets/backgrounds/${selectedLocation}.jpg`),\n            alt: `background of ${pet.petName}`,\n            className: \"pet-background-image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 14\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Type: \", pet.petType]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Color: \", pet.petColor]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Happiness: \", pet.happiness]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Hunger: \", pet.hunger]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Created on: \", pet.createdAt]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(PetDashboard, \"dil8uxcA37//tXg+WV9ymR+z9Wc=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = PetDashboard;\nexport default PetDashboard;\n\n/*import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { getPetDetails, updatePet } from '../../services/api'; \r\nimport '../../styles/PetDashboard.css';\r\n\r\nconst PetDashboard = () => {\r\n  const [pet, setPet] = useState(null);\r\n  const [selectedLocation, setSelectedLocation] = useState('FOREST');\r\n  const [selectedAccessory, setSelectedAccessory] = useState('NONE');\r\n\r\n  // Fetch the pet details from the API when the component is mounted\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    const userId = localStorage.getItem('userId'); // Obtener el userId del localStorage\r\n\r\n    if (!token || !userId) {\r\n      console.error(\"Token or userId missing.\");\r\n      return;\r\n    }\r\n\r\n    const fetchPetDetails = async () => {\r\n      try {\r\n        const response = await getPetDetails(userId); // Solo pasamos el petId y userId\r\n        if (response && response.data) {\r\n          setPet(response.data); // Guardamos los detalles de la mascota\r\n        }\r\n      } catch (err) {\r\n        console.error('Error fetching pet details:', err);\r\n      }\r\n    };\r\n\r\n    fetchPetDetails();\r\n  }, []); // Solo llamamos a la API si el petId está disponible\r\n\r\n  const handleLocationChange = (e) => {\r\n    setSelectedLocation(e.target.value);\r\n    if (pet && pet.id) {\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        updatePet(pet.id, { location: e.target.value }, token);  // Usamos pet.id correctamente\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleAccessoryChange = (e) => {\r\n    setSelectedAccessory(e.target.value);\r\n    if (pet && pet.id) {\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        updatePet(pet.id, { accessory: e.target.value }, token);  // Usamos pet.id correctamente\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleInteraction = async (interactionType) => {\r\n    if (!pet || !pet.id) {\r\n      console.error(\"Pet or Pet ID is not loaded yet.\");\r\n      return;\r\n    }\r\n  \r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      console.error(\"Token not found!\");\r\n      return;\r\n    }\r\n  \r\n    try {\r\n      const response = await updatePet(pet.id, { petInteraction: interactionType }, token);  // Guarda la respuesta de la API aquí\r\n      console.log(`Pet ${interactionType} interaction successful!`);\r\n      setPet(response.data); // Actualizamos el estado con la respuesta de la API\r\n    } catch (err) {\r\n      console.error(\"Error updating pet:\", err);\r\n    }\r\n  };\r\n\r\n  if (!pet) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"pet-dashboard-container\">\r\n      <div className=\"pet-dashboard-content\">\r\n        <div className=\"pet-details-container\">\r\n          <h1>{pet.petName}</h1>\r\n          <div className=\"pet-image-container\">\r\n            <img \r\n              src={require(`../../assets/pets/${pet.petType}_${pet.petColor}.png`)} \r\n              alt={pet.petName} \r\n              className=\"pet-image\"\r\n            />\r\n            <img \r\n              src={require(`../../assets/backgrounds/${selectedLocation}.jpg`)} \r\n              alt={`background of ${pet.petName}`} \r\n              className=\"pet-background-image\"\r\n            />\r\n          </div>\r\n          <p>Type: {pet.petType}</p>\r\n          <p>Color: {pet.petColor}</p>\r\n          <p>Happiness: {pet.happiness}</p>\r\n          <p>Hunger: {pet.hunger}</p>\r\n          <p>Created on: {pet.createdAt}</p>\r\n        </div>\r\n\r\n        <div className=\"pet-interactions\">\r\n          <button onClick={() => handleInteraction('PET')}>Pet</button>\r\n          <button onClick={() => handleInteraction('FEED')}>Feed</button>\r\n          <select value={selectedLocation} onChange={handleLocationChange}>\r\n            <option value=\"FOREST\">Forest</option>\r\n            <option value=\"LAKE\">Lake</option>\r\n            <option value=\"COTTAGE\">Cottage</option>\r\n            <option value=\"HAUNTED_HOUSE\">Haunted House</option>\r\n          </select>\r\n          <select value={selectedAccessory} onChange={handleAccessoryChange}>\r\n            <option value=\"NONE\">None</option>\r\n            <option value=\"LEAF\">Leaf</option>\r\n            <option value=\"CROWN\">Crown</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PetDashboard;*/\n\n/*import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { getPetDetails, updatePet } from '../../services/api'; \r\nimport axios from 'axios';  // Agregar esta línea\r\nimport '../../styles/PetDashboard.css';\r\n\r\nconst PetDashboard = () => {\r\n  const location = useLocation();\r\n  const params = new URLSearchParams(location.search);\r\n  const userId = params.get('userId');\r\n  const petId = params.get('petId');  // Obtener el petId de la URL\r\n\r\n  const [pet, setPet] = useState(null);\r\n  const [selectedLocation, setSelectedLocation] = useState('FOREST');\r\n  const [selectedAccessory, setSelectedAccessory] = useState('NONE');\r\n\r\n  useEffect(() => {\r\n    console.log(\"Pet ID from URL:\", petId); \r\n     // Esto te ayudará a verificar si el petId está en la URL\r\n    if (!petId || !userId) {\r\n      console.error(\"Pet ID or User ID is missing from the URL.\");\r\n      return; // Si no hay petId o userId, no se hace la solicitud\r\n    }\r\n  \r\n    const fetchPetDetails = async () => {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        console.error(\"Token not found!\");\r\n        return;\r\n      }\r\n  \r\n      try {\r\n        const response = await getPetDetails(userId, petId, token); \r\n        if (response && response.data) {\r\n          setPet(response.data);  // Guardamos los datos de la mascota en el estado\r\n          console.log(\"Fetched pet details:\", response.data);  // Verifica qué datos obtienes\r\n        } else {\r\n          console.error(\"No pet data received from the API.\");\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Error fetching pet details:\", err);\r\n      }\r\n    };\r\n  \r\n    fetchPetDetails();\r\n  }, [petId, userId]);\r\n\r\n  // Asegurarse de que pet está cargado antes de intentar cambiar la localización o el accesorio\r\n  const handleLocationChange = (e) => {\r\n    setSelectedLocation(e.target.value);\r\n    if (pet && pet.id) {\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        updatePet(pet.id, { location: e.target.value }, token);  // Usamos pet.id correctamente\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleAccessoryChange = (e) => {\r\n    setSelectedAccessory(e.target.value);\r\n    if (pet && pet.id) {\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        updatePet(pet.id, { accessory: e.target.value }, token);  // Usamos pet.id correctamente\r\n      }\r\n    }\r\n  };\r\n  const handleInteraction = async (interactionType) => {\r\n    console.log(\"Pet before interaction:\", pet);  // Verifica que el pet esté correctamente cargado\r\n  \r\n    // Verifica si pet y pet.id están disponibles antes de continuar\r\n    if (!pet || !pet.id) {\r\n      console.error(\"Pet or Pet ID is not loaded yet.\");\r\n      return;\r\n    }\r\n  \r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      console.error(\"Token not found!\");\r\n      return;\r\n    }\r\n  \r\n    // Definir el action y endpoint para las interacciones\r\n    const interactionMap = {\r\n      PET: { action: 'PET', endpoint: '/api/pet/update' },\r\n      FEED: { action: 'FEED', endpoint: '/api/pet/update' },\r\n    };\r\n  \r\n    const { action, endpoint } = interactionMap[interactionType];\r\n    if (!action || !endpoint) {\r\n      console.error(\"Unknown interaction type:\", interactionType);\r\n      return;\r\n    }\r\n  \r\n    // Datos a enviar en la solicitud\r\n    const data = {\r\n      userId: pet.userId,  // Usamos pet.userId correctamente\r\n      petInteraction: action,  // Pasamos la interacción (PET o FEED)\r\n    };\r\n  \r\n    try {\r\n      // Realizamos la solicitud a la API\r\n      const response = await axios.put(endpoint + `/${pet.id}`, data, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        }\r\n      });\r\n  \r\n      // Comprobamos si la respuesta fue exitosa\r\n      if (response && response.data) {\r\n        console.log(`Pet ${interactionType} interaction successful!`);\r\n        setPet(response.data); // Actualizamos el estado de la mascota con la respuesta de la API\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error updating pet:\", err);\r\n    }\r\n  };\r\n  \r\n  if (!pet) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"pet-dashboard-container\">\r\n      <div className=\"pet-dashboard-content\">\r\n        <div className=\"pet-details-container\">\r\n          <h1>{pet.petName}</h1>\r\n          <div className=\"pet-image-container\">\r\n            <img \r\n              src={require(`../../assets/pets/${pet.petType}_${pet.petColor}.png`)} \r\n              alt={pet.petName} \r\n              className=\"pet-image\"\r\n            />\r\n            <img \r\n              src={require(`../../assets/backgrounds/${selectedLocation}.jpg`)} \r\n              alt={`background of ${pet.petName}`} \r\n              className=\"pet-background-image\"\r\n            />\r\n          </div>\r\n          <p>Type: {pet.petType}</p>\r\n          <p>Color: {pet.petColor}</p>\r\n          <p>Happiness: {pet.happiness}</p>\r\n          <p>Hunger: {pet.hunger}</p>\r\n          <p>Created on: {pet.createdAt}</p>\r\n        </div>\r\n\r\n        <div className=\"pet-interactions\">\r\n          <button onClick={() => handleInteraction('PET')}>Pet</button>\r\n          <button onClick={() => handleInteraction('FEED')}>Feed</button>\r\n          <select value={selectedLocation} onChange={handleLocationChange}>\r\n            <option value=\"FOREST\">Forest</option>\r\n            <option value=\"LAKE\">Lake</option>\r\n            <option value=\"COTTAGE\">Cottage</option>\r\n            <option value=\"HAUNTED_HOUSE\">Haunted House</option>\r\n          </select>\r\n          <select value={selectedAccessory} onChange={handleAccessoryChange}>\r\n            <option value=\"NONE\">None</option>\r\n            <option value=\"LEAF\">Leaf</option>\r\n            <option value=\"CROWN\">Crown</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PetDashboard;*/\nvar _c;\n$RefreshReg$(_c, \"PetDashboard\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","useNavigate","getPetDetails","updatePet","jsxDEV","_jsxDEV","PetDashboard","_s","location","navigate","pet","setPet","selectedLocation","setSelectedLocation","fetchPetDetails","token","localStorage","getItem","userId","console","error","response","petIdFromUrl","data","setLoading","err","handleLocationChange","e","target","value","petId","petUpdateRequest","then","log","catch","className","children","petName","fileName","_jsxFileName","lineNumber","columnNumber","src","require","petType","petColor","alt","happiness","hunger","createdAt","_c","$RefreshReg$"],"sources":["C:/Users/patri/Desktop/JAVA_ITACADEMY/SPRINT_5_VirtualPet/Front/src/components/Pet/PetDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';  // Para navegar a otra página\r\nimport { getPetDetails, updatePet } from '../../services/api';  // Usamos las funciones desde api.js\r\nimport '../../styles/PetDashboard.css';\r\n\r\nconst PetDashboard = () => {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n\r\n  const [pet, setPet] = useState(null);\r\n  const [selectedLocation, setSelectedLocation] = useState('FOREST');\r\n  //const [selectedAccessory, setSelectedAccessory] = useState('NONE');\r\n  //const [loading, setLoading] = useState(true);\r\n\r\n  // Fetch the pet details from the API when the component is mounted\r\n\r\n    const fetchPetDetails = async () => {\r\n      const token = localStorage.getItem('token');\r\n      const userId = localStorage.getItem('userId'); // Obtener el userId desde localStorage\r\n      if (!token || !userId) {\r\n        console.error(\"Token or userId not found!\");\r\n        navigate('/signin');\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await getPetDetails(userId, petIdFromUrl, token);  // Solo pasamos el petId y userId\r\n        if (response && response.data) {\r\n          setPet(response.data); // Guardamos los detalles de la mascota\r\n          setLoading(false);  // Cambiamos a false cuando los detalles se han cargado\r\n        }\r\n      } catch (err) {\r\n        console.error('Error fetching pet details:', err);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n  const handleLocationChange = (e) => {\r\n    setSelectedLocation(e.target.value); // Cambia el valor de la localización\r\n    if (pet && pet.petId) {\r\n      const token = localStorage.getItem('token');\r\n      const userId = localStorage.getItem('userId'); // Obtener el userId desde localStorage\r\n      if (token && userId) {\r\n        // Construimos el objeto para el body de la solicitud\r\n        const petUpdateRequest = {\r\n          location: e.target.value,\r\n        };\r\n\r\n        // Llamamos a la API de actualización para la localización\r\n        updatePet(pet.petId, userId, petUpdateRequest, token)\r\n          .then((response) => {\r\n            console.log(\"Location updated successfully:\", response.data);\r\n            setPet(response.data); // Actualizamos el estado con los nuevos datos de la mascota\r\n          })\r\n          .catch((err) => {\r\n            console.error(\"Error updating location:\", err);\r\n          });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"pet-dashboard-container\">\r\n      <div className=\"pet-dashboard-content\">\r\n        <div className=\"pet-details-container\">\r\n          <h1>{pet.petName}</h1>\r\n          <div className=\"pet-image-container\">\r\n            <img \r\n              src={require(`../../assets/pets/${pet.petType}_${pet.petColor}.png`)} \r\n              alt={pet.petName} \r\n              className=\"pet-image\"\r\n            />\r\n             <img \r\n              src={require(`../../assets/backgrounds/${selectedLocation}.jpg`)} \r\n              alt={`background of ${pet.petName}`} \r\n              className=\"pet-background-image\"\r\n            />\r\n          </div>\r\n          <p>Type: {pet.petType}</p>\r\n          <p>Color: {pet.petColor}</p>\r\n          <p>Happiness: {pet.happiness}</p>\r\n          <p>Hunger: {pet.hunger}</p>\r\n          <p>Created on: {pet.createdAt}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PetDashboard;\r\n\r\n/*import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { getPetDetails, updatePet } from '../../services/api'; \r\nimport '../../styles/PetDashboard.css';\r\n\r\nconst PetDashboard = () => {\r\n  const [pet, setPet] = useState(null);\r\n  const [selectedLocation, setSelectedLocation] = useState('FOREST');\r\n  const [selectedAccessory, setSelectedAccessory] = useState('NONE');\r\n\r\n  // Fetch the pet details from the API when the component is mounted\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    const userId = localStorage.getItem('userId'); // Obtener el userId del localStorage\r\n\r\n    if (!token || !userId) {\r\n      console.error(\"Token or userId missing.\");\r\n      return;\r\n    }\r\n\r\n    const fetchPetDetails = async () => {\r\n      try {\r\n        const response = await getPetDetails(userId); // Solo pasamos el petId y userId\r\n        if (response && response.data) {\r\n          setPet(response.data); // Guardamos los detalles de la mascota\r\n        }\r\n      } catch (err) {\r\n        console.error('Error fetching pet details:', err);\r\n      }\r\n    };\r\n\r\n    fetchPetDetails();\r\n  }, []); // Solo llamamos a la API si el petId está disponible\r\n\r\n  const handleLocationChange = (e) => {\r\n    setSelectedLocation(e.target.value);\r\n    if (pet && pet.id) {\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        updatePet(pet.id, { location: e.target.value }, token);  // Usamos pet.id correctamente\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleAccessoryChange = (e) => {\r\n    setSelectedAccessory(e.target.value);\r\n    if (pet && pet.id) {\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        updatePet(pet.id, { accessory: e.target.value }, token);  // Usamos pet.id correctamente\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleInteraction = async (interactionType) => {\r\n    if (!pet || !pet.id) {\r\n      console.error(\"Pet or Pet ID is not loaded yet.\");\r\n      return;\r\n    }\r\n  \r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      console.error(\"Token not found!\");\r\n      return;\r\n    }\r\n  \r\n    try {\r\n      const response = await updatePet(pet.id, { petInteraction: interactionType }, token);  // Guarda la respuesta de la API aquí\r\n      console.log(`Pet ${interactionType} interaction successful!`);\r\n      setPet(response.data); // Actualizamos el estado con la respuesta de la API\r\n    } catch (err) {\r\n      console.error(\"Error updating pet:\", err);\r\n    }\r\n  };\r\n\r\n  if (!pet) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"pet-dashboard-container\">\r\n      <div className=\"pet-dashboard-content\">\r\n        <div className=\"pet-details-container\">\r\n          <h1>{pet.petName}</h1>\r\n          <div className=\"pet-image-container\">\r\n            <img \r\n              src={require(`../../assets/pets/${pet.petType}_${pet.petColor}.png`)} \r\n              alt={pet.petName} \r\n              className=\"pet-image\"\r\n            />\r\n            <img \r\n              src={require(`../../assets/backgrounds/${selectedLocation}.jpg`)} \r\n              alt={`background of ${pet.petName}`} \r\n              className=\"pet-background-image\"\r\n            />\r\n          </div>\r\n          <p>Type: {pet.petType}</p>\r\n          <p>Color: {pet.petColor}</p>\r\n          <p>Happiness: {pet.happiness}</p>\r\n          <p>Hunger: {pet.hunger}</p>\r\n          <p>Created on: {pet.createdAt}</p>\r\n        </div>\r\n\r\n        <div className=\"pet-interactions\">\r\n          <button onClick={() => handleInteraction('PET')}>Pet</button>\r\n          <button onClick={() => handleInteraction('FEED')}>Feed</button>\r\n          <select value={selectedLocation} onChange={handleLocationChange}>\r\n            <option value=\"FOREST\">Forest</option>\r\n            <option value=\"LAKE\">Lake</option>\r\n            <option value=\"COTTAGE\">Cottage</option>\r\n            <option value=\"HAUNTED_HOUSE\">Haunted House</option>\r\n          </select>\r\n          <select value={selectedAccessory} onChange={handleAccessoryChange}>\r\n            <option value=\"NONE\">None</option>\r\n            <option value=\"LEAF\">Leaf</option>\r\n            <option value=\"CROWN\">Crown</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PetDashboard;*/\r\n\r\n/*import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { getPetDetails, updatePet } from '../../services/api'; \r\nimport axios from 'axios';  // Agregar esta línea\r\nimport '../../styles/PetDashboard.css';\r\n\r\nconst PetDashboard = () => {\r\n  const location = useLocation();\r\n  const params = new URLSearchParams(location.search);\r\n  const userId = params.get('userId');\r\n  const petId = params.get('petId');  // Obtener el petId de la URL\r\n\r\n  const [pet, setPet] = useState(null);\r\n  const [selectedLocation, setSelectedLocation] = useState('FOREST');\r\n  const [selectedAccessory, setSelectedAccessory] = useState('NONE');\r\n\r\n  useEffect(() => {\r\n    console.log(\"Pet ID from URL:\", petId); \r\n     // Esto te ayudará a verificar si el petId está en la URL\r\n    if (!petId || !userId) {\r\n      console.error(\"Pet ID or User ID is missing from the URL.\");\r\n      return; // Si no hay petId o userId, no se hace la solicitud\r\n    }\r\n  \r\n    const fetchPetDetails = async () => {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        console.error(\"Token not found!\");\r\n        return;\r\n      }\r\n  \r\n      try {\r\n        const response = await getPetDetails(userId, petId, token); \r\n        if (response && response.data) {\r\n          setPet(response.data);  // Guardamos los datos de la mascota en el estado\r\n          console.log(\"Fetched pet details:\", response.data);  // Verifica qué datos obtienes\r\n        } else {\r\n          console.error(\"No pet data received from the API.\");\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Error fetching pet details:\", err);\r\n      }\r\n    };\r\n  \r\n    fetchPetDetails();\r\n  }, [petId, userId]);\r\n\r\n  // Asegurarse de que pet está cargado antes de intentar cambiar la localización o el accesorio\r\n  const handleLocationChange = (e) => {\r\n    setSelectedLocation(e.target.value);\r\n    if (pet && pet.id) {\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        updatePet(pet.id, { location: e.target.value }, token);  // Usamos pet.id correctamente\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleAccessoryChange = (e) => {\r\n    setSelectedAccessory(e.target.value);\r\n    if (pet && pet.id) {\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        updatePet(pet.id, { accessory: e.target.value }, token);  // Usamos pet.id correctamente\r\n      }\r\n    }\r\n  };\r\n  const handleInteraction = async (interactionType) => {\r\n    console.log(\"Pet before interaction:\", pet);  // Verifica que el pet esté correctamente cargado\r\n  \r\n    // Verifica si pet y pet.id están disponibles antes de continuar\r\n    if (!pet || !pet.id) {\r\n      console.error(\"Pet or Pet ID is not loaded yet.\");\r\n      return;\r\n    }\r\n  \r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      console.error(\"Token not found!\");\r\n      return;\r\n    }\r\n  \r\n    // Definir el action y endpoint para las interacciones\r\n    const interactionMap = {\r\n      PET: { action: 'PET', endpoint: '/api/pet/update' },\r\n      FEED: { action: 'FEED', endpoint: '/api/pet/update' },\r\n    };\r\n  \r\n    const { action, endpoint } = interactionMap[interactionType];\r\n    if (!action || !endpoint) {\r\n      console.error(\"Unknown interaction type:\", interactionType);\r\n      return;\r\n    }\r\n  \r\n    // Datos a enviar en la solicitud\r\n    const data = {\r\n      userId: pet.userId,  // Usamos pet.userId correctamente\r\n      petInteraction: action,  // Pasamos la interacción (PET o FEED)\r\n    };\r\n  \r\n    try {\r\n      // Realizamos la solicitud a la API\r\n      const response = await axios.put(endpoint + `/${pet.id}`, data, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        }\r\n      });\r\n  \r\n      // Comprobamos si la respuesta fue exitosa\r\n      if (response && response.data) {\r\n        console.log(`Pet ${interactionType} interaction successful!`);\r\n        setPet(response.data); // Actualizamos el estado de la mascota con la respuesta de la API\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error updating pet:\", err);\r\n    }\r\n  };\r\n  \r\n  if (!pet) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"pet-dashboard-container\">\r\n      <div className=\"pet-dashboard-content\">\r\n        <div className=\"pet-details-container\">\r\n          <h1>{pet.petName}</h1>\r\n          <div className=\"pet-image-container\">\r\n            <img \r\n              src={require(`../../assets/pets/${pet.petType}_${pet.petColor}.png`)} \r\n              alt={pet.petName} \r\n              className=\"pet-image\"\r\n            />\r\n            <img \r\n              src={require(`../../assets/backgrounds/${selectedLocation}.jpg`)} \r\n              alt={`background of ${pet.petName}`} \r\n              className=\"pet-background-image\"\r\n            />\r\n          </div>\r\n          <p>Type: {pet.petType}</p>\r\n          <p>Color: {pet.petColor}</p>\r\n          <p>Happiness: {pet.happiness}</p>\r\n          <p>Hunger: {pet.hunger}</p>\r\n          <p>Created on: {pet.createdAt}</p>\r\n        </div>\r\n\r\n        <div className=\"pet-interactions\">\r\n          <button onClick={() => handleInteraction('PET')}>Pet</button>\r\n          <button onClick={() => handleInteraction('FEED')}>Feed</button>\r\n          <select value={selectedLocation} onChange={handleLocationChange}>\r\n            <option value=\"FOREST\">Forest</option>\r\n            <option value=\"LAKE\">Lake</option>\r\n            <option value=\"COTTAGE\">Cottage</option>\r\n            <option value=\"HAUNTED_HOUSE\">Haunted House</option>\r\n          </select>\r\n          <select value={selectedAccessory} onChange={handleAccessoryChange}>\r\n            <option value=\"NONE\">None</option>\r\n            <option value=\"LEAF\">Leaf</option>\r\n            <option value=\"CROWN\">Crown</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PetDashboard;*/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}