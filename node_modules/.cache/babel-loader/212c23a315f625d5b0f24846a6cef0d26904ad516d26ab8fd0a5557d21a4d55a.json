{"ast":null,"code":"const feedPet = async petId => {\n  try {\n    // Obtener la mascota actual (puedes obtener estos valores de un estado o contexto)\n    const pet = getPetFromState(petId); // Método ficticio para obtener la mascota\n\n    // Crear un objeto PetUpdateRequest con los cambios\n    const updateData = {\n      hunger: pet.hunger - 10,\n      // Reducir el hambre\n      happiness: pet.happiness + 10 // Aumentar la felicidad\n    };\n\n    // Enviar la solicitud PUT para actualizar la mascota\n    const response = await fetch(`/api/pet/update/${petId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updateData)\n    });\n    if (response.ok) {\n      const updatedPet = await response.json();\n      // Aquí puedes actualizar el estado o hacer algo con la respuesta\n      updatePetInState(updatedPet);\n      alert('Mascota alimentada y feliz!');\n    } else {\n      alert('Hubo un problema al alimentar a la mascota.');\n    }\n  } catch (error) {\n    console.error('Error al alimentar la mascota:', error);\n  }\n};\n\n// Llamada al feedPet en el evento de clic de un botón\ndocument.getElementById('feedButton').addEventListener('click', () => {\n  const petId = 1; // ID de la mascota (esto lo deberías obtener dinámicamente)\n  feedPet(petId);\n});\n\n/*import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { getPetDetails, updatePet } from '../../services/api'; \r\nimport '../../styles/PetDashboard.css';\r\nimport axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:8080/api';\r\n\r\nexport const api = axios.create({\r\n  baseURL: API_URL,\r\n});\r\n\r\nconst PetDashboard = () => {\r\n  const location = useLocation();\r\n  const params = new URLSearchParams(location.search);\r\n  const userId = params.get('userId');\r\n  const petId = params.get('petId');  // Obtener el petId de la URL\r\n\r\n  const [pet, setPet] = useState(null);\r\n  const [selectedLocation, setSelectedLocation] = useState('FOREST');\r\n  const [selectedAccessory, setSelectedAccessory] = useState('NONE');\r\n\r\n  useEffect(() => {\r\n    if (!petId || !userId) {\r\n      console.error(\"Pet ID or User ID is missing from the URL.\");\r\n      return; // Si no hay petId o userId, no se hace la solicitud\r\n    }\r\n\r\n    const fetchPetDetails = async () => {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        console.error(\"Token not found!\");\r\n        return; // Si no se encuentra el token, no se hace la solicitud\r\n      }\r\n\r\n      try {\r\n        const response = await getPetDetails(userId, petId, token); \r\n        if (response && response.data) {\r\n          setPet(response.data);  // Guardamos los datos de la mascota en el estado\r\n        } else {\r\n          console.error(\"No pet data received from the API.\");\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Error fetching pet details:\", err);\r\n      }\r\n    };\r\n\r\n    fetchPetDetails();\r\n  }, [petId, userId]);  // Dependencias para recargar los detalles de la mascota\r\n\r\n  // Asegurarse de que pet está cargado antes de intentar cambiar la localización o el accesorio\r\n  const handleLocationChange = (e) => {\r\n    setSelectedLocation(e.target.value);\r\n    if (pet && pet.id) {\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        updatePet(pet.id, { location: e.target.value }, token);  // Usamos pet.id correctamente\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleAccessoryChange = (e) => {\r\n    setSelectedAccessory(e.target.value);\r\n    if (pet && pet.id) {\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        updatePet(pet.id, { accessory: e.target.value }, token);  // Usamos pet.id correctamente\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleInteraction = async (interactionType) => {\r\n    // Verificamos si pet está disponible antes de continuar\r\n    if (!pet || !pet.id) {\r\n        console.error(\"Pet or Pet ID is not loaded yet.\");\r\n        return;\r\n    }\r\n\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n        console.error(\"Token not found!\");\r\n        return;\r\n    }\r\n\r\n    // Definir el action y endpoint para las interacciones\r\n    const interactionMap = {\r\n        PET: { action: 'PET', endpoint: '/api/pet/update' },\r\n        FEED: { action: 'FEED', endpoint: '/api/pet/update' },\r\n    };\r\n\r\n    const { action, endpoint } = interactionMap[interactionType];\r\n    if (!action || !endpoint) {\r\n        console.error(\"Unknown interaction type:\", interactionType);\r\n        return;\r\n    }\r\n\r\n    // Datos a enviar en la solicitud\r\n    \r\n\r\n    try {\r\n      // Llamamos a la función updatePet desde api.js y le pasamos el petId y la interacción\r\n      const updatedPet = await updatePet(pet.id, interactionType, token); \r\n      console.log(`Pet ${interactionType} interaction successful!`);\r\n      setPet(updatedPet);  // Actualizamos el estado de la mascota con la respuesta de la API\r\n    } catch (err) {\r\n      console.error(\"Error updating pet interaction:\", err);\r\n    }\r\n  };\r\n\r\n  if (!pet) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"pet-dashboard-container\">\r\n      <div className=\"pet-dashboard-content\">\r\n        <div className=\"pet-details-container\">\r\n          <h1>{pet.petName}</h1>\r\n          <div className=\"pet-image-container\">\r\n            <img \r\n              src={require(`../../assets/pets/${pet.petType}_${pet.petColor}.png`)} \r\n              alt={pet.petName} \r\n              className=\"pet-image\"\r\n            />\r\n            <img \r\n              src={require(`../../assets/backgrounds/${selectedLocation}.jpg`)} \r\n              alt={`background of ${pet.petName}`} \r\n              className=\"pet-background-image\"\r\n            />\r\n          </div>\r\n          <p>Type: {pet.petType}</p>\r\n          <p>Color: {pet.petColor}</p>\r\n          <p>Happiness: {pet.happiness}</p>\r\n          <p>Hunger: {pet.hunger}</p>\r\n          <p>Created on: {pet.createdAt}</p>\r\n        </div>\r\n\r\n        <div className=\"pet-interactions\">\r\n          <button onClick={() => handleInteraction('PET')}>Pet</button>\r\n          <button onClick={() => handleInteraction('FEED')}>Feed</button>\r\n          <select value={selectedLocation} onChange={handleLocationChange}>\r\n            <option value=\"FOREST\">Forest</option>\r\n            <option value=\"LAKE\">Lake</option>\r\n            <option value=\"COTTAGE\">Cottage</option>\r\n            <option value=\"HAUNTED_HOUSE\">Haunted House</option>\r\n          </select>\r\n          <select value={selectedAccessory} onChange={handleAccessoryChange}>\r\n            <option value=\"NONE\">None</option>\r\n            <option value=\"LEAF\">Leaf</option>\r\n            <option value=\"CROWN\">Crown</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PetDashboard;*/","map":{"version":3,"names":["feedPet","petId","pet","getPetFromState","updateData","hunger","happiness","response","fetch","method","headers","body","JSON","stringify","ok","updatedPet","json","updatePetInState","alert","error","console","document","getElementById","addEventListener"],"sources":["C:/Users/patri/Desktop/JAVA_ITACADEMY/SPRINT_5_VirtualPet/Front/src/components/Pet/PetDashboard.js"],"sourcesContent":["const feedPet = async (petId) => {\r\n    try {\r\n        // Obtener la mascota actual (puedes obtener estos valores de un estado o contexto)\r\n        const pet = getPetFromState(petId); // Método ficticio para obtener la mascota\r\n        \r\n        // Crear un objeto PetUpdateRequest con los cambios\r\n        const updateData = {\r\n            hunger: pet.hunger - 10,  // Reducir el hambre\r\n            happiness: pet.happiness + 10,  // Aumentar la felicidad\r\n        };\r\n\r\n        // Enviar la solicitud PUT para actualizar la mascota\r\n        const response = await fetch(`/api/pet/update/${petId}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(updateData),\r\n        });\r\n\r\n        if (response.ok) {\r\n            const updatedPet = await response.json();\r\n            // Aquí puedes actualizar el estado o hacer algo con la respuesta\r\n            updatePetInState(updatedPet);\r\n            alert('Mascota alimentada y feliz!');\r\n        } else {\r\n            alert('Hubo un problema al alimentar a la mascota.');\r\n        }\r\n    } catch (error) {\r\n        console.error('Error al alimentar la mascota:', error);\r\n    }\r\n};\r\n\r\n// Llamada al feedPet en el evento de clic de un botón\r\ndocument.getElementById('feedButton').addEventListener('click', () => {\r\n    const petId = 1; // ID de la mascota (esto lo deberías obtener dinámicamente)\r\n    feedPet(petId);\r\n});\r\n\r\n\r\n/*import React, { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { getPetDetails, updatePet } from '../../services/api'; \r\nimport '../../styles/PetDashboard.css';\r\nimport axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:8080/api';\r\n\r\nexport const api = axios.create({\r\n  baseURL: API_URL,\r\n});\r\n\r\nconst PetDashboard = () => {\r\n  const location = useLocation();\r\n  const params = new URLSearchParams(location.search);\r\n  const userId = params.get('userId');\r\n  const petId = params.get('petId');  // Obtener el petId de la URL\r\n\r\n  const [pet, setPet] = useState(null);\r\n  const [selectedLocation, setSelectedLocation] = useState('FOREST');\r\n  const [selectedAccessory, setSelectedAccessory] = useState('NONE');\r\n\r\n  useEffect(() => {\r\n    if (!petId || !userId) {\r\n      console.error(\"Pet ID or User ID is missing from the URL.\");\r\n      return; // Si no hay petId o userId, no se hace la solicitud\r\n    }\r\n\r\n    const fetchPetDetails = async () => {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        console.error(\"Token not found!\");\r\n        return; // Si no se encuentra el token, no se hace la solicitud\r\n      }\r\n\r\n      try {\r\n        const response = await getPetDetails(userId, petId, token); \r\n        if (response && response.data) {\r\n          setPet(response.data);  // Guardamos los datos de la mascota en el estado\r\n        } else {\r\n          console.error(\"No pet data received from the API.\");\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Error fetching pet details:\", err);\r\n      }\r\n    };\r\n\r\n    fetchPetDetails();\r\n  }, [petId, userId]);  // Dependencias para recargar los detalles de la mascota\r\n\r\n  // Asegurarse de que pet está cargado antes de intentar cambiar la localización o el accesorio\r\n  const handleLocationChange = (e) => {\r\n    setSelectedLocation(e.target.value);\r\n    if (pet && pet.id) {\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        updatePet(pet.id, { location: e.target.value }, token);  // Usamos pet.id correctamente\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleAccessoryChange = (e) => {\r\n    setSelectedAccessory(e.target.value);\r\n    if (pet && pet.id) {\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        updatePet(pet.id, { accessory: e.target.value }, token);  // Usamos pet.id correctamente\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleInteraction = async (interactionType) => {\r\n    // Verificamos si pet está disponible antes de continuar\r\n    if (!pet || !pet.id) {\r\n        console.error(\"Pet or Pet ID is not loaded yet.\");\r\n        return;\r\n    }\r\n\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n        console.error(\"Token not found!\");\r\n        return;\r\n    }\r\n\r\n    // Definir el action y endpoint para las interacciones\r\n    const interactionMap = {\r\n        PET: { action: 'PET', endpoint: '/api/pet/update' },\r\n        FEED: { action: 'FEED', endpoint: '/api/pet/update' },\r\n    };\r\n\r\n    const { action, endpoint } = interactionMap[interactionType];\r\n    if (!action || !endpoint) {\r\n        console.error(\"Unknown interaction type:\", interactionType);\r\n        return;\r\n    }\r\n\r\n    // Datos a enviar en la solicitud\r\n    \r\n\r\n    try {\r\n      // Llamamos a la función updatePet desde api.js y le pasamos el petId y la interacción\r\n      const updatedPet = await updatePet(pet.id, interactionType, token); \r\n      console.log(`Pet ${interactionType} interaction successful!`);\r\n      setPet(updatedPet);  // Actualizamos el estado de la mascota con la respuesta de la API\r\n    } catch (err) {\r\n      console.error(\"Error updating pet interaction:\", err);\r\n    }\r\n  };\r\n\r\n  if (!pet) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"pet-dashboard-container\">\r\n      <div className=\"pet-dashboard-content\">\r\n        <div className=\"pet-details-container\">\r\n          <h1>{pet.petName}</h1>\r\n          <div className=\"pet-image-container\">\r\n            <img \r\n              src={require(`../../assets/pets/${pet.petType}_${pet.petColor}.png`)} \r\n              alt={pet.petName} \r\n              className=\"pet-image\"\r\n            />\r\n            <img \r\n              src={require(`../../assets/backgrounds/${selectedLocation}.jpg`)} \r\n              alt={`background of ${pet.petName}`} \r\n              className=\"pet-background-image\"\r\n            />\r\n          </div>\r\n          <p>Type: {pet.petType}</p>\r\n          <p>Color: {pet.petColor}</p>\r\n          <p>Happiness: {pet.happiness}</p>\r\n          <p>Hunger: {pet.hunger}</p>\r\n          <p>Created on: {pet.createdAt}</p>\r\n        </div>\r\n\r\n        <div className=\"pet-interactions\">\r\n          <button onClick={() => handleInteraction('PET')}>Pet</button>\r\n          <button onClick={() => handleInteraction('FEED')}>Feed</button>\r\n          <select value={selectedLocation} onChange={handleLocationChange}>\r\n            <option value=\"FOREST\">Forest</option>\r\n            <option value=\"LAKE\">Lake</option>\r\n            <option value=\"COTTAGE\">Cottage</option>\r\n            <option value=\"HAUNTED_HOUSE\">Haunted House</option>\r\n          </select>\r\n          <select value={selectedAccessory} onChange={handleAccessoryChange}>\r\n            <option value=\"NONE\">None</option>\r\n            <option value=\"LEAF\">Leaf</option>\r\n            <option value=\"CROWN\">Crown</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PetDashboard;*/"],"mappings":"AAAA,MAAMA,OAAO,GAAG,MAAOC,KAAK,IAAK;EAC7B,IAAI;IACA;IACA,MAAMC,GAAG,GAAGC,eAAe,CAACF,KAAK,CAAC,CAAC,CAAC;;IAEpC;IACA,MAAMG,UAAU,GAAG;MACfC,MAAM,EAAEH,GAAG,CAACG,MAAM,GAAG,EAAE;MAAG;MAC1BC,SAAS,EAAEJ,GAAG,CAACI,SAAS,GAAG,EAAE,CAAG;IACpC,CAAC;;IAED;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mBAAmBP,KAAK,EAAE,EAAE;MACrDQ,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,UAAU;IACnC,CAAC,CAAC;IAEF,IAAIG,QAAQ,CAACO,EAAE,EAAE;MACb,MAAMC,UAAU,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACxC;MACAC,gBAAgB,CAACF,UAAU,CAAC;MAC5BG,KAAK,CAAC,6BAA6B,CAAC;IACxC,CAAC,MAAM;MACHA,KAAK,CAAC,6CAA6C,CAAC;IACxD;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;EAC1D;AACJ,CAAC;;AAED;AACAE,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC,CAACC,gBAAgB,CAAC,OAAO,EAAE,MAAM;EAClE,MAAMtB,KAAK,GAAG,CAAC,CAAC,CAAC;EACjBD,OAAO,CAACC,KAAK,CAAC;AAClignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}